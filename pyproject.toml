
[build-system]
build-backend = "hatchling.build"
requires = [
  "hatchling==1.27.0",
  "hatch-nodejs-version",
]
[project]
classifiers = [
  "Development Status :: 3 - Alpha",
  "License :: OSI Approved :: Apache Software License",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Operating System :: OS Independent",
  "Intended Audience :: Science/Research",
  "Intended Audience :: Developers",
]
dependencies = [
  "ag2[openai]==0.9.1.post0",
  "aiocsv==1.3.2",
  "aiofiles==24.1.0",
  "aiosqlite==0.21.0",
  "asyncer==0.0.8",
  "numpy<=2.2.5",
  "nest_asyncio==1.6.0",
  "graphviz==0.20.3",
  "pandas>=2",
  "pillow==11.2.1",
  "jupytext",
  "parso==0.8.4",
  "pydantic>=2.10.2,<3",
  "typer>=0.9,<0.16",
  # until this: https://github.com/fastapi/typer/pull/1145
  "click<8.2",
  "httpx<1",
]
dynamic = ["version", "description", "authors", "urls", "keywords"]
name = "waldiez"
readme = "README.md"
requires-python = ">=3.10,<3.14"

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.build.targets.sdist]
exclude = ["**/example.py", ".gitignore"]
packages = ["waldiez", "waldiez.*"]
directory = "out/dist"

[tool.hatch.build.targets.wheel]
exclude = ["**/example.py"]
packages = ["waldiez", "waldiez.*"]
directory = "out/dist"

[tool.hatch.version]
source = "nodejs"

[tool.hatch.build.hooks.version]
path = "waldiez/_version.py"
template = '''
# SPDX-License-Identifier: Apache-2.0.
# Copyright (c) 2024 - 2025 Waldiez and contributors.
"""Version information for waldiez.

This file is automatically generated by Hatchling.
Do not edit this file directly.
"""
__version__ = VERSION = "{version}"
'''

[tool.hatch.metadata.hooks.nodejs]
contributors-as-maintainers = false
fields = ["description", "authors", "urls"]

[project.optional-dependencies]
redis = [
    "ag2[redis]==0.9.1.post0",
]
websockets = [
    "ag2[websockets]==0.9.1.post0",
]

ag2_extras = [
  # models
  "ag2[anthropic]==0.9.1.post0",
  "ag2[bedrock]==0.9.1.post0",
  "ag2[cohere]==0.9.1.post0",
  "ag2[gemini]==0.9.1.post0 ;sys_platform != 'win32'",
  "ag2[gemini]==0.9.1.post0 ;sys_platform == 'win32' and platform_machine != 'arm64' and platform_machine != 'aarch64' and platform_machine != 'ARM64' and platform_machine != 'AARCH64'",
  "ag2[groq]==0.9.1.post0",
  "ag2[lmm]==0.9.1.post0",
  "ag2[mistral]==0.9.1.post0",
  "ag2[ollama]==0.9.1.post0",
  "ag2[together]==0.9.1.post0 ;sys_platform != 'win32'",
  "ag2[together]==0.9.1.post0 ;sys_platform == 'win32' and platform_machine != 'arm64' and platform_machine != 'aarch64' and platform_machine != 'ARM64' and platform_machine != 'AARCH64'", # utils
  # utils
  "ag2[websockets]==0.9.1.post0",
  "ag2[redis]==0.9.1.post0",
  "ag2[interop-crewai]==0.9.1.post0",
  "ag2[interop-langchain]==0.9.1.post0",
  "ag2[neo4j]==0.9.1.post0 ;sys_platform != 'win32'",
  "ag2[neo4j]==0.9.1.post0 ;sys_platform == 'win32' and platform_machine != 'arm64' and platform_machine != 'aarch64' and platform_machine != 'ARM64' and platform_machine != 'AARCH64'",
  "ag2[websurfer]==0.9.1.post0",
  "chromadb>=0.5.10 ;sys_platform != 'win32'",
  "chromadb>=0.5.10 ;sys_platform == 'win32' and platform_machine != 'arm64' and platform_machine != 'aarch64' and platform_machine != 'ARM64' and platform_machine != 'AARCH64'",
  "pgvector>=0.4.0",
  "psycopg>=3.2.6 ;sys_platform == 'linux'",
  "psycopg>=3.2.6 ;sys_platform == 'win32' and platform_machine == 'arm64'",
  "psycopg>=3.2.6 ;sys_platform == 'win32' and platform_machine == 'ARM64'",
  "psycopg>=3.2.6 ;sys_platform == 'win32' and platform_machine == 'aarch64'",
  "psycopg>=3.2.6 ;sys_platform == 'win32' and platform_machine == 'AARCH64'",
  "psycopg[binary]>=3.2.6 ;sys_platform != 'linux' and platform_machine != 'arm64' and platform_machine != 'ARM64' and platform_machine != 'aarch64' and platform_machine != 'AARCH64'",
  "protobuf>=4.25.3",
  "pypdf",
  "pysqlite3-binary==0.5.4 ;sys_platform == 'linux' and platform_machine != 'arm64' and platform_machine != 'aarch64' and platform_machine != 'ARM64' and platform_machine != 'AARCH64'",
  "ipython",
  "markdownify",
  "beautifulsoup4",
  "sentence-transformers ;sys_platform == 'linux'",
  "huggingface-hub",
  "qdrant-client[fastembed] ;sys_platform != 'win32'",
  "qdrant-client[fastembed] ;sys_platform == 'win32' and platform_machine != 'arm64' and platform_machine != 'aarch64' and platform_machine != 'ARM64' and platform_machine != 'AARCH64'",
  "pgvector>=0.4.0",
  "embedchain ;sys_platform != 'win32'",
  "embedchain ;sys_platform == 'win32' and platform_machine != 'arm64' and platform_machine != 'aarch64' and platform_machine != 'ARM64' and platform_machine != 'AARCH64'",
  "langchain-community>=0.3.12,<1",
  "pydantic-ai>=0.0.21",
  "pymongo>=4.11",
  "wikipedia-api>=0.8.1, <1.0",
  "google-api-python-client>=2.163.0,<3.0",
  "google-auth-httplib2>=0.2.0,<0.3",
  "google-auth-oauthlib>=1.2.1,<2.0",
  "mcp>=1.4.0,<1.6",
]
dev = [
  "ag2[redis]==0.9.1.post0",
  "ag2[websockets]==0.9.1.post0",
  "autoflake==2.3.1",
  "bandit==1.8.3",
  "black[jupyter]==25.1.0",
  "build==1.2.2.post1",
  "fakeredis>=2.28.1",
  "flake8==7.2.0",
  "jsonschema==4.23.0",
  "jupyterlab>=4.3.0",
  "jupyter_server==2.16.0",
  "hatchling==1.27.0",
  "mypy==1.15.0",
  "pandas-stubs==2.2.3.250308",
  "pre-commit==4.2.0",
  "pydocstyle==6.3.0",
  "pylint==3.3.6",
  "python-dotenv==1.1.0",
  "ruff==0.11.9",
  "types-pyyaml==6.0.12.20250402",
  "yamllint==1.37.1",
  "toml==0.10.2; python_version <= '3.10'",
  "types-jsonschema==4.23.0.20241208",
  "types-redis==4.6.0.20241004",
  "types-toml==0.10.8.20240310",
  "types-requests==2.32.0.20250328",
]
docs = [
  "mdx-include==1.4.2",
  "mdx_truly_sane_lists==1.3",
  "mkdocs==1.6.1",
  "mkdocs-jupyter==0.25.1",
  "mkdocs-macros-plugin==1.3.7",
  "mkdocs-material==9.6.14",
  "mkdocs-minify-html-plugin==0.3.1",
  "mkdocstrings[crystal,python]==0.29.1",
  "mkdocstrings-python==1.16.10",
  "mkdocs-awesome-nav",
  "mkdocs-open-in-new-tab==1.0.8",
]
jupyter = [
  "waldiez_jupyter==0.4.7",
  "jupyterlab>=4.3.0",
  "jupyter_server==2.16.0",
]
runner = [
  "waldiez_runner==0.4.7; python_version >= '3.11'",
]
studio = [
  "waldiez_studio==0.4.7",
]
test = [
  "ag2[redis]==0.9.1.post0",
  "ag2[websockets]==0.9.1.post0",
  "fakeredis>=2.28.1",
  "jsonschema==4.23.0",
  "pytest==8.3.5",
  "pytest-asyncio==0.26.0",
  "pytest-cov==6.1.1",
  "pytest-html==4.1.1",
  "pytest-sugar==1.0.0",
  "pytest-timeout==2.4.0",
  "pytest-xdist==3.6.1",
]

[project.scripts]
waldiez = "waldiez.cli:app"

[tool.hatch.envs.default]
python = "3.12"
dependencies = ["waldiez[dev,test,docs]"]

[tool.hatch.envs.default.scripts]
test = """pytest -c pyproject.toml --cov=waldiez --cov-branch --cov-report=term-missing --cov-report=lcov:coverage/py/lcov.info --cov-report=html:coverage/py/html --cov-report=xml:coverage/py/coverage.xml --junitxml=coverage/py/xunit.xml tests"""
test-models = "pytest -c pyproject.toml -vv tests/models"
test-exporting = "pytest -c pyproject.toml -vv tests/exporting"
test-io = "pytest -c pyproject.toml -vv tests/io"

format-black = "black --config pyproject.toml waldiez tests scripts"
format-autoflake = "autoflake --in-place --remove-all-unused-imports --remove-unused-variables --recursive waldiez tests scripts"
format-ruff = "ruff format --config pyproject.toml waldiez tests scripts"
format = """
hatch run format-black
hatch run format-autoflake
hatch run format-ruff
"""

lint-black = "black --config pyproject.toml --check --diff waldiez tests scripts"
lint-mypy = "mypy --config pyproject.toml waldiez tests scripts"
lint-flake8 = "flake8 --config .flake8 waldiez tests scripts"
lint-bandit = "bandit -r -c pyproject.toml waldiez scripts"
lint-yamllint = "yamllint ."
lint-ruff = "ruff check --config pyproject.toml waldiez tests scripts"
lint-pylint = "pylint --rcfile=pyproject.toml waldiez tests scripts"
lint = """
hatch run lint-black
hatch run lint-mypy
hatch run lint-flake8
hatch run lint-bandit
hatch run lint-yamllint
hatch run lint-ruff
hatch run lint-pylint
"""

docs = "mkdocs build -d site"
build = "python -m build --wheel --sdist --outdir out/dist"

check = """
hatch run format
hatch run lint
hatch run test
"""

matrix-test = "hatch run test:test"

release = """
hatch run check
hatch run matrix-test
hatch run docs
hatch run build
"""

all = "hatch run release"

[tool.hatch.envs.test]
inherit = true

[[tool.hatch.envs.test.matrix]]
python = ["3.10", "3.11", "3.12", "3.13"]

# black
[tool.black]
exclude = '''
/(
    \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | .local
  | _build
  | __init__.py
  | .local
  | examples
  | node_modules
  | waldiez_out
)/
'''
include = '''
    \.pyi?$
'''
line-length = 80
skip-string-normalization = true

# mypy
[tool.mypy]
files = "."
show_error_codes = true
# xcode/dmypy: follow-imports=silent not supported
# follow_imports = "skip"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_subclassing_any = false
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
exclude = [
  ".venv",
  ".local",
  "node_modules",
  "examples",
  "waldiez_out",
]
ignore_missing_imports = false
no_implicit_reexport = true
platform = "linux"
plugins = [
  "pydantic.mypy",
]
strict_optional = true
warn_redundant_casts = true
warn_unused_configs = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
module = "waldiez.tests.*"
# with python < 3.13 we get seem to get "call-arg" errors :(
# and with python>=3.13 "unused-ignore" : (
disable_error_code = ["call-arg"]

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true

# pylint
[tool.pylint.master]
extension-pkg-whitelist = []
load-plugins = [
  "pylint.extensions.mccabe",
  "pylint.extensions.redefined_variable_type",
  "pylint.extensions.broad_try_clause",
  "pylint.extensions.no_self_use",
  "pylint.extensions.docparams",
]
# reports=true
fail-under = 8.0
ignore = ["CVS"]
ignore-paths = [
  ".venv",
  ".local*",
  "node_modules",
  "examples",
  "waldiez_out",
]
recursive = true

unsafe-load-any-extension = "no"

[tool.pylint.messages_control]
enable = ["c-extension-no-member"]
[tool.pylint.format]
max-line-length = 80
[tool.pylint.similarities]
ignore-imports = "yes"
ignore-signatures = "yes"
min-similarity-lines = 10
[tool.pylint.broad_try_clause]
max-try-statements = 3
[tool.pylint.design]
max-args = 11
max-attributes = 11
max-positional-arguments = 11
max-statements = 50
[tool.pylint.string]
check-quote-consistency = true
check-str-concat-over-line-jumps = true
[tool.pylint.parameter_documentation]
accept-no-param-doc = false
accept-no-raise-doc = false
accept-no-return-doc = false
accept-no-yields-doc = false
# Possible choices: ["sphinx", "epytext", "google", "numpy", "default"]
default-docstring-type = "numpy"

# bandit
[tool.bandit]
exclude_dirs = [
  ".venv",
  ".local",
  "node_modules",
  "examples",
  "waldiez_out",
]
# B104: bind to all interfaces (0.0.0.0)
# B110: allow pass on try/except
# B404: allow import subprocess
# B602, B603: allow shell=True (subprocess,popen)
skips = ["B104", "B110", "B404", "B602", "B603"]
[tool.bandit.assert_used]
skips = ["*_test.py", "*/test_*.py"]

# ruff
[tool.ruff]
extend-exclude = [
  ".venv",
  ".local",
  "node_modules",
  "examples",
  "waldiez_out",
  "docs",
]
line-length = 80

[tool.ruff.lint]
select = ["F", "Q", "D", "I", "G", "C4", "C90", "E", "W", "B"]
# # Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# # Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# exclude = ["*.pyi", "*.j2"]
# Like Black, use double quotes for strings.
quote-style = "double"
# Like Black, indent with spaces, rather than tabs.
indent-style = "space"
# Like Black, respect magic trailing commas.
docstring-code-format = true
line-ending = "lf"
skip-magic-trailing-comma = false

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.ruff.lint.isort]
force-wrap-aliases = true
combine-as-imports = true
split-on-trailing-comma = true

# pytest
[tool.pytest.ini_options]
addopts = """
    -d \
    -s \
    -n auto \
    --exitfirst \
    --durations=10 \
    --color=yes \
    --timeout=120
"""
asyncio_default_fixture_loop_scope = "session"
asyncio_mode = "auto"
filterwarnings = [
  # DeprecationWarning:
  #   Type google._upb._message.MessageMapContainer uses PyType_Spec with a metaclass that has custom tp_new.
  #   This is deprecated and will no longer be allowed in Python 3.14.
  "ignore::DeprecationWarning",
]
python_files = [
  "tests.py",
  "test_*.py",
  "*_tests.py",
]
pythonpath = ["."]

# coverage
[tool.coverage.run]
omit = [
  "example.py",
  "_version.py",
  "**/cli_extras/*.py",
]
[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "if TYPE_CHECKING:",
  "if __name__ == .__main__.:",
]
fail_under = 80
precision = 2
